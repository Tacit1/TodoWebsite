import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
import { CalendarModule, DateAdapter } from 'angular-calendar';
import { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
import { CalendarSchedulerHourSegmentComponent } from './calendar-scheduler-hour-segment.component';
import { CalendarSchedulerHeaderComponent } from './calendar-scheduler-header.component';
import { CalendarSchedulerEventComponent } from './calendar-scheduler-event.component';
import { CalendarSchedulerEventTitleComponent } from './calendar-scheduler-event-title.component';
import { CalendarSchedulerEventContentComponent } from './calendar-scheduler-event-content.component';
import { CalendarSchedulerEventActionsComponent } from './calendar-scheduler-event-actions.component';
import { CalendarSchedulerUtils } from './utils/calendar-scheduler-utils.provider';
import { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
import { CalendarSchedulerDatePipe } from './pipes/calendar-scheduler-date.pipe';
import { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
import { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
import { SchedulerConfig } from './scheduler-config';
import * as i0 from "@angular/core";
import * as i1 from "angular-calendar";
export * from './calendar-scheduler-view.component';
export * from './formatters/scheduler-date-formatter.provider';
export * from './formatters/scheduler-event-title-formatter.provider';
export * from './pipes/scheduler-event-title.pipe';
export * from './pipes/calendar-scheduler-date.pipe';
export * from './utils/calendar-scheduler-utils';
export * from './utils/calendar-scheduler-utils.provider';
export * from '../common/utils';
export * from './models';
export * from './calendar-scheduler-hour-segment.component';
export * from './calendar-scheduler-header.component';
export * from './calendar-scheduler-event.component';
export * from './calendar-scheduler-event-title.component';
export * from './calendar-scheduler-event-content.component';
export * from './calendar-scheduler-event-actions.component';
export const SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
export function provideSchedulerConfig(config) {
    return new SchedulerConfig(config);
}
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalendarModule, DateAdapter } from 'angular-calendar';
 * import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * @NgModule({
 *  imports: [
 *     CalendarModule.forRoot({
 *       provide: DateAdapter,
 *       useFactory: adapterFactory
 *     }),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
export class SchedulerModule {
    static forRoot(config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideSchedulerConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    }
}
SchedulerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: SchedulerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SchedulerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.1.1", ngImport: i0, type: SchedulerModule, declarations: [CalendarSchedulerViewComponent,
        CalendarSchedulerHourSegmentComponent,
        CalendarSchedulerHeaderComponent,
        CalendarSchedulerEventComponent,
        CalendarSchedulerEventTitleComponent,
        CalendarSchedulerEventContentComponent,
        CalendarSchedulerEventActionsComponent,
        SchedulerEventTitlePipe,
        CalendarSchedulerDatePipe], imports: [CommonModule, i1.CalendarModule], exports: [CalendarSchedulerDatePipe,
        CalendarSchedulerViewComponent,
        CalendarSchedulerHourSegmentComponent,
        CalendarSchedulerHeaderComponent,
        CalendarSchedulerEventComponent,
        CalendarSchedulerEventTitleComponent,
        CalendarSchedulerEventContentComponent,
        CalendarSchedulerEventActionsComponent] });
SchedulerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: SchedulerModule, providers: [
        CalendarSchedulerUtils,
        SchedulerEventTitlePipe,
        CalendarSchedulerDatePipe,
        SchedulerEventTitleFormatter,
        SchedulerDateFormatter
    ], imports: [CommonModule,
        CalendarModule.forRoot({
            provide: DateAdapter,
            useFactory: adapterFactory
        })] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: SchedulerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        CalendarModule.forRoot({
                            provide: DateAdapter,
                            useFactory: adapterFactory
                        })
                    ],
                    declarations: [
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerHourSegmentComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent,
                        SchedulerEventTitlePipe,
                        CalendarSchedulerDatePipe
                    ],
                    providers: [
                        CalendarSchedulerUtils,
                        SchedulerEventTitlePipe,
                        CalendarSchedulerDatePipe,
                        SchedulerEventTitleFormatter,
                        SchedulerDateFormatter
                    ],
                    exports: [
                        CalendarSchedulerDatePipe,
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerHourSegmentComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,